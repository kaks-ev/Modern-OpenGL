#include "window.h"
#include "Shader.h"
#include "Texture.h"

int main() {

	Window Game("Flappy Bird - OpenGL");

	// bird Object
	Shader birdShader("bird.glsl");
	birdShader.Bind();

	Texture birdTex("bird.png");
	birdTex.Active(1);
	birdShader.SetUniformInt("uTexture", 1);

	float vertices[] = {
		// position					/ texCoords
		 0.5f, -0.5f, 0.0f,	1.0f, 0.0f,
		-0.5f, -0.5f, 0.0f,	0.0f, 0.0f,
		-0.5f,  0.5f, 0.0f,	0.0f, 1.0f,
		 0.5f,  0.5f, 0.0f,	1.0f, 1.0f
	};

	unsigned int indices[] = {
		0, 1, 2,
		2, 3, 0
	};

	unsigned int vao, vbo, ebo;
	glGenVertexArrays(1, &vao);
	glBindVertexArray(vao);

	glGenBuffers(1, &vbo);
	glBindBuffer(GL_ARRAY_BUFFER, vbo);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), &vertices, GL_STATIC_DRAW);

	glGenBuffers(1, &ebo);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), &indices, GL_STATIC_DRAW);

	// position
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*) (0 * sizeof(float)));
	glEnableVertexAttribArray(0);
	// Textures
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	glBindVertexArray(0);

	// background object
	Shader bgShader("bg.glsl");
	bgShader.Bind();

	Texture bgTexture("bg.jpg");
	bgTexture.Active(1);
	bgShader.SetUniformInt("uTexture", 1);

	float vertices2[] = {
		// position				 / Texcoord
		-1.0f,-1.0f, 0.0f, 0.0f, 0.0f,
		 0.0f,-1.0f, 0.0f, 1.0f, 0.0f,
		 0.0f, 1.0f, 0.0f, 1.0f, 1.0f,
		-1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
	};

	unsigned int indices2[] = {
		0, 1, 2,
		2, 3, 0
	};

	unsigned int vao2, vbo2, ebo2;
	glGenVertexArrays(1, &vao2);
	glBindVertexArray(vao2);

	glGenBuffers(1, &vbo2);
	glBindBuffer(GL_ARRAY_BUFFER, vbo2);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices2), &vertices2, GL_STATIC_DRAW);

	glGenBuffers(1, &ebo2);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo2);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices2), &indices2, GL_STATIC_DRAW);
	// position
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(0 * sizeof(float)));
	glEnableVertexAttribArray(0);
	// textures
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(2);

	glBindVertexArray(0);

	while (Game.loop()) {
		Game.render();
		// draw background
		{
			bgShader.Bind();
			bgTexture.Active(1);

			glBindVertexArray(vao2);
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo2);
			glDrawElements(GL_TRIANGLES, sizeof(indices2) / sizeof(unsigned int), GL_UNSIGNED_INT, nullptr);
		}

		// draw bird
		{
			birdShader.Bind();
			birdTex.Active(1);

			glBindVertexArray(vao);
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);
			glDrawElements(GL_TRIANGLES, sizeof(indices) / sizeof(unsigned int), GL_UNSIGNED_INT, nullptr);
		}


		Game.update();
	}
	glDeleteVertexArrays(1, &vao);
	glDeleteBuffers(1, &vbo);
	glDeleteBuffers(1, &ebo);

	glDeleteVertexArrays(1, &vao2);
	glDeleteBuffers(1, &vbo2);
	glDeleteBuffers(1, &ebo2);

	return 0;
}